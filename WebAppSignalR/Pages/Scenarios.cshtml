@page
@model WebAppSignalR.Pages.ScenariosModel

<div class="container">
    <div class="row">
        <div class="col">
            <button class="btn btn-primary" id="btnInvokeHubMethod">Invoke Hub Method</button>

            <button class="btn btn-primary" id="btnInvokeComplexType">Invoke with complex type</button>

            <button class="btn btn-primary" id="btnWaitForMessage">WaitForMessage</button>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col">
            <textarea id="textArea" rows="10" class="form-control"></textarea>
        </div>
    </div>
</div>

@section Scripts{
    <script>

        $(document).ready(() => {
            let currentDate = new Date();

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/advancedHub", {
                    transport: signalR.HttpTransportType.WebSockets | signalR.HttpTransportType.ServerSentEvents
                })
                //.withHubProtocol(new MessagePackHubProtocol()) // default: JSON 
                //.configureLogging(signalR.LogLevel.Trace)
                //.configureLogging(new CustomLogger())
                .withAutomaticReconnect()
                //.withAutomaticReconnect(new CustomRetryPolicy())
                .build();


            // open connection
            connection.start().then(() => {
                console.log("Connection to 'AdvancedHub' ready.");
                $('#textArea').css('background-color', 'PaleGreen');
            })
            .catch( (err) => {
                return console.error(err.toString());
            });

            // handlers
            connection.on("HandleMessage", (message) => {
                console.log(message);
                $('#textArea').val($('#textArea').val() + message + '\n');
            });

            connection.on("HandleComplexMessage", (message) => {
                console.log(message);
                $('#textArea').val($('#textArea').val() + message + '\n');
            });

            connection.on("WaitForMessageHandler", async () => {
                let promise = new Promise((resolve, reject) => {
                    setTimeout(() => {
                        resolve("message");
                    }, 100);
                });
                return promise;
            });

            // connection lifecycle events
            connection.onreconnecting((error) => {
                $('#textArea').css('background-color', 'Khaki');
            });

            connection.onreconnected((connectionId) => {
                $('#textArea').css('background-color', 'Khaki');

                setTimeout(() => {
                    $('#textArea').css('background-color', 'PaleGreen');
                }, 5000);
            });

            connection.onclose((error) => {
                $('#textArea').css('background-color', 'DarkSalmon');
            });


            // button handlers
            $('#btnInvokeHubMethod').click(() => {       
                let message = `Date from server ${currentDate.toLocaleString()}`;
                connection.invoke("PrintOnConsole", message); 
            });

            $('#btnInvokeComplexType').click(() => {
                let complexMessage = {
                    user: "John",
                    message: "Hi there!"
                };
                connection.invoke("InvokeComplexType", complexMessage);
            });

            $('#btnWaitForMessage').click(() => {
                connection.invoke("WaitForMessage", connection.connectionId).then((message) => {
                    console.log(message);
                    $('#textArea').val($('#textArea').val() + message + '\n');
                });
            });
        });

    </script>
}
